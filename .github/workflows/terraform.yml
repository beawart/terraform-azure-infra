name: Terraform Pipeline

on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:
    inputs:
      action:
        description: "Select the pipeline action to run"
        required: true
        type: choice
        options:
          - plan-apply
          - destroy
      confirm_destroy:
        description: "Type YES to confirm destroy (only required if action=destroy)"
        required: false

env:
  TF_VAR_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

jobs:
  # -------------------------
  # META JOB
  # -------------------------
  pipeline-start:
    name: ðŸš¦ Pipeline Start
    runs-on: ubuntu-latest
    steps:
      - name: Show Selected Action
        run: |
          echo "### ðŸš€ Terraform Pipeline Starting" >> $GITHUB_STEP_SUMMARY
          echo "Triggered by: ${{ github.triggering_actor }}" >> $GITHUB_STEP_SUMMARY
          echo "Event: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "Selected Action: **${{ github.event.inputs.action }}**" >> $GITHUB_STEP_SUMMARY
            if [ "${{ github.event.inputs.action }}" = "destroy" ]; then
              echo "Destroy Confirmation: **${{ github.event.inputs.confirm_destroy }}**" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "Selected Action: plan-apply (auto-triggered)" >> $GITHUB_STEP_SUMMARY
          fi

  # -------------------------
  # VALIDATE (always safe)
  # -------------------------
  terraform-validate:
    name: Terraform Validate
    if: github.event_name != 'workflow_dispatch' || github.event.inputs.action == 'plan-apply'
    runs-on: ubuntu-latest
    needs: pipeline-start
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0
      - name: Terraform Init (Backend Disabled)
        run: terraform init -backend=false
      - name: Validate Terraform
        run: terraform validate
      - name: âœ… Validation Summary
        run: echo "Terraform configuration validated successfully." >> $GITHUB_STEP_SUMMARY

  # -------------------------
  # PLAN FOR PRs (dummy backend, no secrets)
  # -------------------------
  terraform-plan-pr:
    name: Terraform Plan (PR - Dummy Backend)
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    needs: terraform-validate
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0
      - name: Terraform Init (no backend)
        run: terraform init -backend=false
      - name: Terraform Plan (no backend)
        run: |
          terraform plan -no-color -input=false > plan_output.txt || true
      - name: Comment Plan Summary on PR
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const plan = fs.readFileSync('plan_output.txt', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `### Terraform (Dummy) Plan Output\n\`\`\`\n${plan}\n\`\`\``
            });

  # -------------------------
  # PLAN FOR MAIN (real backend, secrets)
  # -------------------------
  terraform-plan-main:
    name: Terraform Plan (Main - Real Backend)
    if: (github.event_name == 'push' && github.ref == 'refs/heads/main') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'plan-apply')
    runs-on: ubuntu-latest
    environment: ci
    needs: terraform-validate
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    outputs:
      changes_detected: ${{ steps.check-plan.outputs.changes }}
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0
      - name: Terraform Init (real backend)
        run: terraform init -reconfigure
      - name: Terraform Plan (real backend)
        run: |
          terraform plan -out=tfplan
          terraform show -no-color tfplan > plan_output.txt
      - uses: actions/upload-artifact@v4
        with:
          name: terraform-plan
          path: tfplan
      - name: Check for Changes
        id: check-plan
        run: |
          if grep -Eiq "no changes|no actions|up-to-date" plan_output.txt; then
            echo "changes=false" >> $GITHUB_OUTPUT
          else
            echo "changes=true" >> $GITHUB_OUTPUT
          fi
      - name: âœ… Plan Summary
        run: cat plan_output.txt >> $GITHUB_STEP_SUMMARY

  # -------------------------
  # APPLY (only on main, gated)
  # -------------------------
  terraform-apply:
    name: Terraform Apply
    if: github.ref == 'refs/heads/main' &&
      needs.terraform-plan-main.outputs.changes_detected == 'true'
    runs-on: ubuntu-latest
    needs: terraform-plan-main
    environment:
      name: production
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: terraform-plan
          path: .
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0
      - name: Terraform Init
        run: terraform init -reconfigure
      - name: Terraform Apply
        env:
          TF_VAR_admin_password: ${{ secrets.ADMIN_PASSWORD }}
        run: terraform apply -auto-approve tfplan
      - name: âœ… Apply Summary
        run: echo "Terraform apply executed successfully." >> $GITHUB_STEP_SUMMARY

  # -------------------------
  # DESTROY (manual only)
  # -------------------------
  terraform-destroy:
    name: Terraform Destroy
    if: github.event_name == 'workflow_dispatch' &&
      github.event.inputs.action == 'destroy' &&
      github.event.inputs.confirm_destroy == 'YES'
    runs-on: ubuntu-latest
    needs: pipeline-start
    environment:
      name: production
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0
      - name: Terraform Init
        run: terraform init -reconfigure
      - name: Terraform Destroy
        run: terraform destroy -auto-approve
