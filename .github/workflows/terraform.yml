name: Terraform Pipeline

on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:
    inputs:
      confirm:
        description: 'Type "destroy" to confirm'
        required: true

env:
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

jobs:
  terraform-validate:
    name: Terraform Validate
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0
      - name: Terraform Init
        run: terraform init -backend=false
      - name: Validate Terraform
        run: terraform validate
      - name: ✅ Validation Summary
        run: echo "Terraform configuration validated successfully." >> $GITHUB_STEP_SUMMARY

  terraform-init:
    name: Terraform Init
    runs-on: ubuntu-latest
    needs: terraform-validate
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0
      - name: Terraform Init
        run: terraform init -reconfigure
      - name: Upload Init Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: terraform-init
          path: |
            .
            !.git/
      - name: ✅ Init Summary
        run: echo "Terraform initialized and artifacts uploaded." >> $GITHUB_STEP_SUMMARY

  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: terraform-init
    outputs:
      changes_detected: ${{ steps.check-plan.outputs.changes }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: terraform-init
          path: .
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0
      - name: Terraform Init
        run: terraform init -reconfigure
      - name: Terraform Plan
        run: |
          terraform plan -out=tfplan
          terraform show -no-color tfplan > plan_output.txt
      - name: Upload Plan Artifact
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan
          path: tfplan
      - name: Check for Changes
        id: check-plan
        run: |
          if grep -iq "no changes" plan_output.txt; then
            echo "No changes detected."
            echo "changes=false" >> $GITHUB_OUTPUT
          else
            echo "Changes detected."
            echo "changes=true" >> $GITHUB_OUTPUT
      - name: Comment Plan Summary on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const plan = fs.readFileSync('plan_output.txt', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `### Terraform Plan Summary\n\`\`\`\n${plan}\n\`\`\``
            });
      - name: ✅ Plan Summary
        run: echo "Terraform plan completed. Changes detected ${{ steps.check-plan.outputs.changes }}" >> $GITHUB_STEP_SUMMARY

  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: terraform-plan
    if: github.ref == 'refs/heads/main' && needs.terraform-plan.outputs.changes_detected == 'true'
    environment:
      name: production
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: terraform-plan
          path: .
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0
      - name: Terraform Init
        run: terraform init -reconfigure
      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan
      - name: ✅ Apply Summary
        run: echo "Terraform apply executed successfully." >> $GITHUB_STEP_SUMMARY

  apply-skipped:
    name: Apply Skipped Notice
    runs-on: ubuntu-latest
    needs: terraform-plan
    if: needs.terraform-plan.outputs.changes_detected == 'false'
    steps:
      - name: Log Skipped Apply
        run: |
          echo "Terraform apply skipped: No infrastructure changes detected." >> $GITHUB_STEP_SUMMARY

  terraform-destroy:
    name: Terraform Destroy
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.confirm == 'destroy'
    environment:
      name: production
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0
      - name: Terraform Init
        run: terraform init -reconfigure
      - name: Terraform Destroy
        run: terraform destroy -auto-approve
      - name: ⚠️ Destroy Summary
        run: echo "Terraform destroy executed manually." >> $GITHUB_STEP_SUMMARY
